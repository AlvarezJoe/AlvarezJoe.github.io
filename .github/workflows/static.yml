# Workflow for code quality checks and deploying static content to GitHub Pages
name: CI/CD Pipeline

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  
  # Runs on pull requests
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write  # Allow writing to repository (for auto-fixes)
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Code quality checks
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev prettier eslint stylelint stylelint-config-standard htmlhint sass
      
      - name: Create config files
        run: |
          # Prettier config
          cat > .prettierrc << 'EOF'
          {
            "semi": true,
            "trailingComma": "es5",
            "singleQuote": true,
            "printWidth": 80,
            "tabWidth": 2,
            "useTabs": false
          }
          EOF
          
          # ESLint config (new v9 format)
          cat > eslint.config.js << 'EOF'
          export default [
            {
              languageOptions: {
                ecmaVersion: "latest",
                sourceType: "module",
                globals: {
                  window: "readonly",
                  document: "readonly",
                  console: "readonly"
                }
              },
              rules: {
                "no-unused-vars": "warn",
                "no-console": "off"
              }
            }
          ];
          EOF
          
          # Stylelint config (simple and lenient)
          cat > .stylelintrc.json << 'EOF'
          {
            "extends": ["stylelint-config-standard"],
            "rules": {
              "number-max-precision": null,
              "keyframes-name-pattern": null,
              "selector-id-pattern": null,
              "declaration-block-no-shorthand-property-overrides": null
            }
          }
          EOF
          
          # HTMLHint config
          cat > .htmlhintrc << 'EOF'
          {
            "tagname-lowercase": true,
            "attr-lowercase": true,
            "attr-value-double-quotes": true,
            "doctype-first": true,
            "tag-pair": true,
            "spec-char-escape": true,
            "id-unique": true,
            "src-not-empty": true,
            "attr-no-duplication": true,
            "title-require": true
          }
          EOF
      
      - name: Format with Prettier
        run: |
          npx prettier --write "**/*.{html,css,scss,js}"
          echo "Prettier formatting applied"
      
      - name: Lint HTML
        run: |
          npx htmlhint "**/*.html" || true
          echo "HTML linting completed (non-blocking)"
      
      - name: Lint and auto-fix CSS
        run: |
          npx stylelint "**/*.css" --fix || true
          echo "CSS linting completed (non-blocking)"
      
      - name: Lint JavaScript
        run: |
          npx eslint "**/*.js" --fix || true
          echo "JavaScript linting completed (non-blocking)"
      
      - name: Commit auto-fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Auto-fix formatting and linting issues [skip ci]"
            git push
            echo "Auto-fixes committed and pushed"
          else
            echo "No changes to commit"
          fi
        continue-on-error: true

  # Deploy job (only runs on main branch)
  deploy:
    needs: lint-and-format
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
